'''
Напишите функцию, которая принимает на вход строку и выводит результаты в соответствии со следующей таблицей:

Входные данные	Выходной сигнал
"Джаброни"	"Текила Патрона"
"Школьный консультант"	"Что-нибудь с алкоголем"
"Программист"	"Хипстерское Крафтовое пиво"
"Член Велосипедной банды"	"Самогон"
"Политик"	"Ваши налоговые доллары"
"Рэпер"	"Кристалл"
что - нибудь еще	"Пиво"
любое другое значение Примечание: — это значение по умолчанию:
если на вход функции не поступает ни одно из значений из таблицы,
то возвращаемое значение должно быть "Beer".

Убедитесь, что вы учитываете случаи, когда некоторые слова отображаются без правильной прописной буквы.
Например, ввод "pOLitiCIaN" по-прежнему должен возвращать "Your tax dollars".

'''
# drink_by_profession = {
#     "Jabroni": "Patron Tequila",
#     "School Counselor": "Anything with Alcohol",
#     "Programmer": "Hipster Craft Beer",
#     "Bike Gang Member": "Moonshine",
#     "Politician": "Your tax dollars",
#     "Rapper": "Cristal"
# }
#
# def get_drink_by_profession(msg):
#     return drink_by_profession.get(msg.title(), 'Beer')


'''
Ваш коллега написал простой цикл для вывода списка его любимых животных. 
Но, похоже, в грамматике есть небольшая ошибка, из-за которой программа не работает. Исправьте её! :)

Если вы передадите в функцию список своих любимых животных, 
вы должны получить список животных с упорядоченными названиями и добавленными новыми строками.

Например, передавая в:

[ "dog", "cat", "elephant" ]
приведет к:

"1. dog\n2. cat\n3. elephant\n"

Это как я понял>
1. dog
2. cat
3. elephant
'''
# def foo(animals):
#     result = ""
#     for i, element in enumerate(animals, start=1):
#         result += f"{i}. {element}\n"
#     return result
#
# text = ["dog", "cat", "elephant"]
# print(foo(text))
#
# #или
# def list_animals(animals):
#     lst = ''
#     for i in range(len(animals)):
#         lst += str(i + 1) + '. ' + animals[i] + '\n'
#     return lst

'''
Описание:
Уберите все восклицательные знаки в конце предложения.

Примеры
"Hi!"     ---> "Hi"
"Hi!!!"   ---> "Hi"
"!Hi"     ---> "!Hi"
"!Hi!"    ---> "!Hi"
"Hi! Hi!" ---> "Hi! Hi"
"Hi"      ---> "Hi"
'''
# def remove(st:str) :
#     return st.rstrip('!')
#
# text = "Hi!!! Hi! Hi!"
#
# print(remove(text))

'''
Создайте функцию finalGrade, которая вычисляет итоговую оценку учащегося в зависимости от двух параметров: 
оценки за экзамен и количества выполненных проектов.

Эта функция должна принимать два аргумента: экзамен — оценка за экзамен (от 0 до 100); 
проекты — количество выполненных проектов (от 0 и выше);

Эта функция должна возвращать число (окончательную оценку). Существует четыре типа окончательных оценок:

100 баллов, если оценка за экзамен выше 90 или если количество выполненных проектов превышает 10.
90 баллов, если оценка за экзамен выше 75 баллов и если количество выполненных проектов не менее 5.
75 баллов, если оценка за экзамен превышает 50 баллов и если количество выполненных проектов составляет минимум 2.
0, в других случаях
Примеры(Входные данные-->Выходные данные):

100, 12 --> 100
99, 0 --> 100
10, 15 --> 100

85, 5 --> 90

55, 3 --> 75

55, 0 --> 0
20, 2 --> 0
'''
# def final_grade(exam, projects):
#     if exam > 90 or projects > 10:
#         return 100
#     elif exam > 75 and projects >= 5:
#         return 90
#     elif exam > 50 and projects >=2:
#         return 75
#     else:
#         return 0

'''
Возвращает количество гласных в заданной строке.

В этой ката мы будем считать гласные a, e, i, o, u (но не y).

Входная строка будет состоять только из строчных букв и / или пробелов.
'''
# vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']
#
# def get_count(sentence):
#     count_ = 0
#     for vowel in sentence:
#         if vowel in  vowels:
#             count_ +=1
#
#     return count_
#
# print(get_count("jjdaa"))

'''
Тролли атакуют ваш раздел комментариев!

Распространённый способ справиться с этой ситуацией — удалить из комментариев троллей все гласные, нейтрализовав угрозу.

Ваша задача — написать функцию, которая принимает строку и возвращает новую строку без гласных.

Например, строка «This website is for losers LOL!» превратится в «Ths wbst s fr lsrs LL!».

Примечание: в этом ката y не считается гласной.
'''
# def disemvowel(string_) :
#     vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']
#     list_ =[]
#
#     for char in string_:
#         if char not in vowels:
#             list_.append(char)
#
#     string_ = ''.join(list_)
#
#     return string_
#
# print(disemvowel("This website is for losers LOL!"))

'''
Добро пожаловать. В этой задаче вам нужно возвести в квадрат каждую цифру числа и объединить их.

Например, если мы пропустим 9119 через функцию, получится 811181, потому что 92 — это 81, а 12 — это 1. (81-1-1-81)

Пример № 2: при вводе 765 будет/должно получиться 493625, потому что 72 равно 49, 62 равно 36, а 52 равно 25. (49-36-25)

Примечание: Функция принимает целое число и возвращает целое число.

Счастливого Кодирования!
'''
# def square_digits(num: int):
#     digits = list(str(num))
#     result = ''
#
#     for n in digits:
#         n_int = int(n)
#         result += str(n_int ** 2)
#
#     return result
#
#
# print(square_digits(9119))

'''
В этом небольшом задании вам дана строка чисел, разделённых пробелами, и нужно вернуть самое большое и самое маленькое числа.

Примеры
high_and_low("1 2 3 4 5") # return "5 1"
high_and_low("1 2 -3 4 5") # return "5 -3"
high_and_low("1 9 3 4 -5") # return "9 -5"
Примечания
Все номера действительны Int32, нет необходимости их подтверждать.
Во входной строке всегда будет хотя бы одно число.
В выходной строке должно быть два числа, разделённых одним пробелом, причём большее число должно стоять первым.
'''
#def high_and_low(numbers: str):
#     digits = numbers.split(' ')
#     digits_list = []
#
#     for num in digits:
#         num_int = int(num)
#         digits_list.append(num_int)
#
#     num_max = str(max(digits_list))
#     num_min = str(min(digits_list))
#
#     return f'{num_max} {num_min}'
#
#
# print(high_and_low("1 9 3 4 -5"))

'''
В этом задании вам нужно создать функцию, 
которая принимает список неотрицательных целых чисел 
и строк и возвращает новый список с отфильтрованными строками.

Пример
filter_list([1,2,'a','b']) == [1,2]
filter_list([1,'a','b',0,15]) == [1,0,15]
filter_list([1,2,'aasf','1','123',123]) == [1,2,123]
'''
# def filter_list(l):
#     number_list = []
#
#     for i in l:
#         if type(i) == int:
#             number_list.append(i)
#
#     return number_list
#
#
# print(filter_list([1,2,'aasf','1','123',123]))

'''
Ваша задача — создать функцию, которая может принимать в качестве аргумента 
любое неотрицательное целое число и возвращать его с цифрами в порядке убывания. 
По сути, нужно переставить цифры так, чтобы получилось максимально возможное число.

Примеры:
Ввод: 42145 Вывод: 54421
Ввод: 145263 Вывод: 654321
Ввод: 123456789 Вывод: 987654321
'''
def descending_order(num):
    return int(''.join(sorted([str(n) for n in str(num)], reverse=True)))

print(descending_order(123456789))
